
#include <QString>
#include <QTextCodec>

#ifndef TEXT

QString ConverToUnicode(const char* p)
{
	QByteArray ba = p;
	QTextCodec *gbk = QTextCodec::codecForName("GBK");
	QString strUnicode = gbk->toUnicode(ba);
	return strUnicode;
}

extern QString ConverToUnicode(const char* p);

//vs2015编译器中文乱码问题
#define TEXT(p) ConverToUnicode(p)


//mingw 编译器中文乱码问题
#define TEXT_CU(p) QString::fromLocal8Bit(p)
#endif




QString ShowRmb(double dlNum,int sep)
{
    QString strNum = QString::number(dlNum,'0',sep);
    int nLen;
    int nPos = strNum.lastIndexOf('.');
    if(nPos==-1)
    {
        nLen = strNum.length();
    }
    else
    {
        nLen=nPos;
    }
    for(int i=nLen-4;i>0;i-=4)
    {
        strNum.insert(i,",");
    }

    return strNum;
}



typedef struct Node
{
	int id;
	std::string sName;
};

typedef struct Comm
{
	Node nd1;
	Node nd2;
	bool bSel;
};

int main()
{	
	std::ostringstream ostr;
	std::vector<Node> vec;
	for (int i = 0; i < 7;i++)
	{
		Node nd;
		nd.id = i;
		ostr.str("");
		ostr << "name_" << i;
		nd.sName = ostr.str();
		vec.push_back(nd);
	}

	/*for (int i = 0; i < vec.size(); i++)
	{
		std::cout << vec[i].sName << std::endl;
	}*/

	std::vector<Comm> vecComm;
	for (int i = 0; i < (vec.size()-1);i++)
	{
		Node nd1 = vec[i];
		for (int j = i + 1; j < vec.size();j++)
		{
			Node nd2 = vec[j];

			Comm cm;
			cm.nd1 = nd1;
			cm.nd2 = nd2;
			cm.bSel = false;
			vecComm.push_back(cm);
		}
	}

	std::random_shuffle(vecComm.begin(), vecComm.end());	

	std::vector<Comm> vecCommSort;	
	std::set<int> vSet;
	while (vecCommSort.size() != vecComm.size())
	{
		bool bFind = false;
		for (int i = 0; i < vecComm.size();i++)
		{
			if (vecComm[i].bSel == false)
			{				
				std::set<int>::iterator itor1 = vSet.find(vecComm[i].nd1.id);
				std::set<int>::iterator itor2 = vSet.find(vecComm[i].nd2.id);
				if (itor1== vSet.end() && itor2== vSet.end())
				{
					vecCommSort.push_back(vecComm[i]);
					vecComm[i].bSel = true;

					vSet.insert(vecComm[i].nd1.id);					
					vSet.insert(vecComm[i].nd2.id);					
					bFind = true;
					break;
				}
			}			
		}
		if (!bFind)
		{
			vSet.clear();
		}
	}

	for (int i = 0; i < vecCommSort.size(); i++)
	{
		std::cout << vecCommSort[i].nd1.sName << " vs " << vecCommSort[i].nd2.sName;
		if ( ((i + 1)*2) %vec.size()  == 0)
		{
			std::cout << std::endl;
			std::cout << std::endl;
		}
		else
		{
			std::cout << "\t";
		}
	}
	std::system("pause");
}
